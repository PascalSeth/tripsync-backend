// TripSync - Complete Optimized Schema with RBAC
// Transportation service platform with integrated recommendation system

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ===== RBAC SYSTEM =====

enum UserRole {
  SUPER_ADMIN
  CITY_ADMIN
  EMERGENCY_ADMIN
  PLACE_OWNER
  STORE_OWNER
  DRIVER
  USER
  EMERGENCY_RESPONDER
  DISPATCHER
  SUPPORT_AGENT
}

enum Permission {
  // User Management
  CREATE_USER
  READ_USER
  UPDATE_USER
  DELETE_USER
  MANAGE_USER_ROLES
  
  // Driver Management
  APPROVE_DRIVER
  SUSPEND_DRIVER
  VIEW_DRIVER_ANALYTICS
  MANAGE_DRIVER_SHIFTS
  
  // Store Management
  CREATE_STORE
  UPDATE_STORE
  DELETE_STORE
  MANAGE_STORE_PRODUCTS
  VIEW_STORE_ANALYTICS
  
  // Place Management
  CREATE_PLACE
  UPDATE_PLACE
  DELETE_PLACE
  APPROVE_PLACE
  MANAGE_PLACE_PHOTOS
  
  // Service Management
  CREATE_SERVICE
  UPDATE_SERVICE
  CANCEL_SERVICE
  ASSIGN_DRIVER
  
  // Emergency Management
  DISPATCH_EMERGENCY
  MANAGE_RESPONDERS
  VIEW_EMERGENCY_ANALYTICS
  COORDINATE_INCIDENTS
  
  // Financial Management
  VIEW_PAYMENTS
  PROCESS_REFUNDS
  MANAGE_COMMISSIONS
  VIEW_FINANCIAL_REPORTS
  
  // System Management
  MANAGE_SYSTEM_CONFIG
  VIEW_SYSTEM_ANALYTICS
  MANAGE_REGIONS
  MANAGE_SERVICE_TYPES
  
  // Content Management
  MODERATE_REVIEWS
  MANAGE_NOTIFICATIONS
  HANDLE_REPORTS
}

model RolePermission {
  id           String     @id @default(uuid())
  role         UserRole
  permission   Permission
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  
  @@unique([role, permission])
  @@map("role_permissions")
}

// ===== CORE USER MODELS =====

model User {
  id                 String               @id @default(uuid())
  email              String               @unique
  password           String
  firstName          String
  lastName           String
  phone              String               @unique
  profileImage       String?
  address            String?
  dateOfBirth        DateTime?
  gender             Gender?
  emergencyContact   String?
  role               UserRole             @default(USER)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  isActive           Boolean              @default(true)
  isVerified         Boolean              @default(false)
  verificationToken  String?
  resetPasswordToken String?
  lastLoginAt        DateTime?
  twoFactorEnabled   Boolean              @default(false)
  twoFactorSecret    String?
  
  // User relationships
  driver             DriverProfile?       // If user is also a driver
  storeOwner         StoreOwnerProfile?   // If user is a store owner
  placeOwner         PlaceOwnerProfile?   // If user is a place owner
  emergencyResponder EmergencyResponderProfile? // If user is emergency responder
  services           Service[]
  payments           Payment[]
  reviews            Review[]             // Reviews given by user
  receivedReviews    DriverToUserReview[] // Reviews received from drivers
  favoriteLocations  FavoriteLocation[]
  notifications      Notification[]
  reports            Report[]             // Reports filed by user
  sessions           UserSession[]
  
  // Place recommendation relationships
  placeSurveys       Survey[]
  placeVotes         PlaceVote[]
  preferenceInsights UserPreferenceInsight[]

  @@map("users")
  AuditLog AuditLog[]
}

model UserSession {
  id           String    @id @default(uuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  token        String    @unique
  deviceInfo   String?
  ipAddress    String?
  isActive     Boolean   @default(true)
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
  lastUsedAt   DateTime  @default(now())
  
  @@map("user_sessions")
}

model AnonymousUser {
  id              String        @id @default(uuid())
  name            String
  gender          Gender?
  sessionId       String?       @unique
  createdAt       DateTime      @default(now())
  lastActiveAt    DateTime      @default(now())
  
  // Relations
  placeSurveys    Survey[]
  placeVotes      PlaceVote[]  // Votes cast by this anonymous user
  preferenceInsights UserPreferenceInsight[]
  
  @@map("anonymous_users")
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

// ===== STORE OWNER PROFILE =====

model StoreOwnerProfile {
  id                String    @id @default(uuid())
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessLicense   String
  taxId             String?
  businessType      String
  verificationStatus ApprovalStatus @default(PENDING)
  verifiedAt        DateTime?
  
  stores            Store[]
  
  @@map("store_owner_profiles")
}

// ===== PLACE OWNER PROFILE =====

model PlaceOwnerProfile {
  id                String    @id @default(uuid())
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessLicense   String?
  verificationStatus ApprovalStatus @default(PENDING)
  verifiedAt        DateTime?
  subscriptionTier  SubscriptionTier @default(BASIC)
  subscriptionExpiresAt DateTime?
  
  places            Place[]
  
  @@map("place_owner_profiles")
}

enum SubscriptionTier {
  BASIC
  PREMIUM
  ENTERPRISE
}

// ===== EMERGENCY RESPONDER PROFILE =====

model EmergencyResponderProfile {
  id                String           @id @default(uuid())
  userId            String           @unique
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  badgeNumber       String           @unique
  department        String
  specialization    EmergencyType
  certifications    String[]         // JSON array of certifications
  currentStatus     ResponderStatus  @default(OFF_DUTY)
  currentLocationId String?
  currentLocation   Location?        @relation(fields: [currentLocationId], references: [id])
  
  shifts            ResponderShift[]
  emergencyServices Service[]        @relation("EmergencyResponder")
  
  @@map("emergency_responder_profiles")
}

enum ResponderStatus {
  ON_DUTY
  OFF_DUTY
  RESPONDING
  UNAVAILABLE
  BREAK
}

model ResponderShift {
  id          String                    @id @default(uuid())
  responderId String
  responder   EmergencyResponderProfile @relation(fields: [responderId], references: [id], onDelete: Cascade)
  startTime   DateTime
  endTime     DateTime
  shiftType   ShiftType
  isActive    Boolean                   @default(true)
  
  @@map("responder_shifts")
}

enum ShiftType {
  DAY
  NIGHT
  WEEKEND
  EMERGENCY
}

// ===== DRIVER PROFILE (Enhanced) =====

model DriverProfile {
  id                   String             @id @default(uuid())
  userId               String             @unique
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  driversLicense       String
  dayBookingPrice      Float?            // Driver-set price per day
  nationalId           String
  registrationPic      String
  driverPic            String
  licenseExpiryDate    DateTime
  vehicleId            String?
  vehicle              Vehicle?           @relation(fields: [vehicleId], references: [id])
  rating               Float              @default(0)
  totalTrips           Int                @default(0)
  currentStatus        DriverStatus       @default(OFFLINE)
  approvalStatus       ApprovalStatus     @default(PENDING)
  backgroundCheckDate  DateTime?
  insuranceInfo        String?
  currentLocationId    String?
  currentLocation      Location?          @relation(fields: [currentLocationId], references: [id])
  isAvailableForDayBooking Boolean        @default(false)
  isTaxiDriver         Boolean            @default(false)
  lastActiveAt         DateTime?
  inactivityThreshold  Int                @default(300) // seconds
  
  driverAvailability   DriverAvailability[]
  driverDistricts      DriverDistrict[]
  // Driver relationships
  services             Service[]
  assignedDriverTypes  AssignedDriverType[]
  taxis                Taxi[]
  reviewsGiven         DriverToUserReview[] // Reviews given to users
  reportsAgainst       Report[]             // Reports against this driver

  @@map("driver_profiles")
}

enum DriverStatus {
  ONLINE
  OFFLINE
  ON_TRIP
  BREAK
  MAINTENANCE
  SUSPENDED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

model AssignedDriverType {
  id              String        @id @default(uuid())
  driverProfileId String
  driverProfile   DriverProfile @relation(fields: [driverProfileId], references: [id], onDelete: Cascade)
  serviceTypeId   String
  serviceType     ServiceType   @relation(fields: [serviceTypeId], references: [id])
  isActive        Boolean       @default(true)
  
  @@unique([driverProfileId, serviceTypeId])
  @@map("assigned_driver_types")
}

// ===== VEHICLE MODELS (Enhanced) =====

model Vehicle {
  id                  String         @id @default(uuid())
  registrationNumber  String         @unique
  make                String
  model               String
  year                Int
  color               String
  seats               Int
  vehicleTypeId       String
  vehicleType         VehicleType    @relation(fields: [vehicleTypeId], references: [id])
  insuranceNumber     String
  insuranceExpiryDate DateTime
  inspectionDate      DateTime
  photos              String[]
  isActive            Boolean        @default(true)
  maintenanceStatus   MaintenanceStatus @default(OPERATIONAL)
  lastMaintenanceDate DateTime?
  
  driverProfiles      DriverProfile[]
  
  @@map("vehicles")
}

enum MaintenanceStatus {
  OPERATIONAL
  MAINTENANCE_DUE
  IN_MAINTENANCE
  OUT_OF_SERVICE
}

model VehicleType {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  
  vehicles    Vehicle[]
  
  @@map("vehicle_types")
}

// ===== TAXI MODELS (Enhanced) =====

model Taxi {
  id                  String        @id @default(uuid())
  registrationNumber  String        @unique
  taxiTypeId          String
  taxiType            ServiceType   @relation(fields: [taxiTypeId], references: [id])
  driverId            String?
  driver              DriverProfile? @relation(fields: [driverId], references: [id])
  hasMeter            Boolean       @default(true)
  meterNumber         String?
  licensePlate        String
  maxPassengers       Int
  isActive            Boolean       @default(true)
  currentLocationId   String?
  currentLocation     Location?     @relation("CurrentTaxiLocation", fields: [currentLocationId], references: [id])
  acceptanceWindow    Int           @default(15) // seconds
  
  services            Service[]
  
  @@map("taxis")
}

model TaxiStand {
  id          String    @id @default(uuid())
  name        String
  locationId  String
  location    Location  @relation(fields: [locationId], references: [id])
  capacity    Int
  isActive    Boolean   @default(true)
  
  @@map("taxi_stands")
}

model TaxiZone {
  id          String      @id @default(uuid())
  name        String
  description String?
  boundaries  String?     // GeoJSON polygon data
  basePrice   Float       // Base fare for this zone
  
  originTaxis     Service[] @relation("OriginTaxiZone")
  destinationTaxis Service[] @relation("DestinationTaxiZone")
  
  @@map("taxi_zones")
}

// ===== LOCATION MODELS (Enhanced) =====

model Location {
  id              String            @id @default(uuid())
  latitude        Float
  longitude       Float
  address         String
  city            String
  state           String?
  country         String
  postalCode      String?
  placeId         String?           // Google Maps Place ID or similar
  gpsAccuracy     Float?            // GPS accuracy in meters
  
  // Location relationships
  pickupServices   Service[]        @relation("PickupLocation")
  dropoffServices  Service[]        @relation("DropoffLocation")
  favoriteLocations FavoriteLocation[]
  currentDrivers   DriverProfile[]
  stores           Store[]
  routeOrigins     Route[]          @relation("RouteOrigin")
  routeDestinations Route[]         @relation("RouteDestination")
  taxiStands       TaxiStand[]
  currentTaxis     Taxi[]           @relation("CurrentTaxiLocation")
  places           Place[]          // Places at this location
  movingCompanies  MovingCompany[]
  emergencyResponders EmergencyResponderProfile[]
  
  @@map("locations")
}

model FavoriteLocation {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  locationId  String
  location    Location  @relation(fields: [locationId], references: [id])
  label       String    // Home, Work, etc.
  isDefault   Boolean   @default(false)
  
  @@unique([userId, label])
  @@map("favorite_locations")
}

model Route {
  id                String           @id @default(uuid())
  originLocationId  String
  originLocation    Location         @relation("RouteOrigin", fields: [originLocationId], references: [id])
  destinationLocationId String
  destinationLocation Location       @relation("RouteDestination", fields: [destinationLocationId], references: [id])
  distance          Float
  estimatedTime     Int              // In minutes
  polyline          String           // Encoded polyline for the route
  trafficFactor     Float            @default(1.0) // Traffic multiplier
  
  sharedRideGroups  SharedRideGroup[]
  
  @@map("routes")
}

model Region {
  id          String      @id @default(uuid())
  name        String
  type        RegionType
  parentId    String?
  parent      Region?     @relation("RegionHierarchy", fields: [parentId], references: [id])
  children    Region[]    @relation("RegionHierarchy")
  code        String?
  
  districts   District[]  @relation("RegionDistrict")
  
  @@unique([name, type, parentId])
  @@map("regions")
}

enum RegionType {
  COUNTRY
  STATE
  CITY
  DISTRICT
}

model District {
  id          String    @id @default(uuid())
  name        String
  regionId    String
  region      Region    @relation("RegionDistrict", fields: [regionId], references: [id])
  boundaries  String?   // GeoJSON polygon data
  driverDistricts    DriverDistrict[]

  dayBookings Service[] @relation("DistrictBooking")
  
  @@unique([name, regionId])
  @@map("districts")
}

// ===== SERVICE MODELS (Enhanced) =====

model ServiceType {
  id                String              @id @default(uuid())
  name              String              @unique
  category          ServiceCategory
  description       String?
  basePrice         Float
  pricePerKm        Float?
  pricePerMinute    Float?
  pricePerHour      Float?
  hasFixedRoutes    Boolean             @default(false)
  maxCapacity       Int                 @default(1)
  isActive          Boolean             @default(true)
  commissionRate    Float               @default(0.18) // 18% platform fee
  cancellationFee   Float               @default(0)
  
  services          Service[]
  assignedDrivers   AssignedDriverType[]
  taxiServices      Taxi[]
  
  @@map("service_types")
}

enum ServiceCategory {
  RIDE           // Standard ride service
  TAXI           // Taxi service
  DAY_BOOKING    // Day booking service
  STORE_DELIVERY // Store/package delivery
  HOUSE_MOVING   // House moving service
  EMERGENCY      // Emergency service
  SHARED_RIDE    // Shared ride service
}

model Service {
  id                    String            @id @default(uuid())
  userId                String
  user                  User              @relation(fields: [userId], references: [id])
  serviceTypeId         String
  serviceType           ServiceType       @relation(fields: [serviceTypeId], references: [id])
  driverId              String?
  driver                DriverProfile?    @relation(fields: [driverId], references: [id])
  placeId               String?           // Link to recommended place
  place                 Place?            @relation(fields: [placeId], references: [id])
  
  // Common service fields
  status                ServiceStatus     @default(REQUESTED)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  scheduledTime         DateTime?
  completedTime         DateTime?
  notes                 String?
  estimatedPrice        Float?
  finalPrice            Float?
  
  // Locations
  pickupLocationId      String?
  pickupLocation        Location?         @relation("PickupLocation", fields: [pickupLocationId], references: [id])
  dropoffLocationId     String?
  dropoffLocation       Location?         @relation("DropoffLocation", fields: [dropoffLocationId], references: [id])
  
  // Distance and duration details
  estimatedDistance     Float?
  actualDistance        Float?
  estimatedDuration     Int?              // In minutes
  actualDuration        Int?              // In minutes
  
  // Confirmation and completion details
  confirmationMethod    ConfirmationMethod?
  confirmationCode      String?           @unique
  confirmedAt           DateTime?
  
  // Enhanced ride features
  taxiId                String?
  taxi                  Taxi?             @relation(fields: [taxiId], references: [id])
  originZoneId          String?
  originZone            TaxiZone?         @relation("OriginTaxiZone", fields: [originZoneId], references: [id])
  destinationZoneId     String?
  destinationZone       TaxiZone?         @relation("DestinationTaxiZone", fields: [destinationZoneId], references: [id])
  isMetered             Boolean?
  passengerCount        Int?
  isSharingEnabled      Boolean?
  maxSharedRiders       Int?
  sharedRideGroupId     String?
  sharedRideGroup       SharedRideGroup?  @relation(fields: [sharedRideGroupId], references: [id])
  
  // Safety and monitoring
  speedAlerts           Boolean           @default(false)
  geofenceAlerts        Boolean           @default(false)
  safetyCheckInterval   Int?              // minutes
  
  // Day Booking specific
  districtId            String?
  district              District?         @relation("DistrictBooking", fields: [districtId], references: [id])
  startTime             DateTime?         // For day bookings
  endTime               DateTime?         // For day bookings
  multipleStops         String?           // JSON array of stops
  waitingTime           Int?              // minutes
  specialRequirements   String?           // JSON array of requirements
  
  // Store Order specific
  storeId               String?
  store                 Store?            @relation(fields: [storeId], references: [id])
  orderItems            OrderItem[]
  preparationTime       Int?              // minutes
  temperatureMonitoring Boolean           @default(false)
  
  // House Moving specific
  movingCompanyId       String?
  movingCompany         MovingCompany?    @relation(fields: [movingCompanyId], references: [id])
  vehicleSize           String?
  trackingCode          String?           @unique
  inventoryItems        MoveInventoryItem[]
  serviceTier           MovingServiceTier?
  packingRequired       Boolean           @default(false)
  furnitureDisassembly  Boolean           @default(false)
  temporaryStorage      Boolean           @default(false)
  
  // Emergency specific
  emergencyType         EmergencyType?
  responderId           String?           // ID of emergency responder
  responder             EmergencyResponderProfile? @relation("EmergencyResponder", fields: [responderId], references: [id])
  incidentReport        String?           // JSON incident details
  multiAgencyAlert      Boolean           @default(false)
  
  // Delivery specific
  packageSize           PackageSize?
  packageWeight         Float?
  recipientIdRequired   Boolean           @default(false)
  proofOfDelivery       String?           // URL to proof image/signature
  scheduledPickup       DateTime?
  priorityLevel         PriorityLevel     @default(STANDARD)
  
  // Relationships
  payment               Payment?
  review                Review?           // Review from user
  driverReview          DriverToUserReview? // Review from driver
  reports               Report[]          // Reports related to this service
  statusHistory         ServiceStatusHistory[]
  
  @@map("services")
  Commission Commission[]
}

enum ServiceStatus {
  REQUESTED
  SCHEDULED
  SEARCHING_DRIVER
  DRIVER_ACCEPTED
  DRIVER_ARRIVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  
  // Store specific
  PREPARING
  READY_FOR_PICKUP
  OUT_FOR_DELIVERY
  DELIVERED
  
  // Moving specific
  CONFIRMED
  LOADING
  IN_TRANSIT
  UNLOADING
  
  // Emergency specific
  ACKNOWLEDGED
  DISPATCHED
  ARRIVED
  RESOLVED
}

enum ConfirmationMethod {
  QR_CODE
  BUTTON
  DRIVER_CONFIRMED
  AUTOMATIC
}

enum EmergencyType {
  POLICE
  AMBULANCE
  FIRE
  RESCUE
}

enum MovingServiceTier {
  BASIC
  FULL_SERVICE
  PREMIUM
}

enum PackageSize {
  SMALL
  MEDIUM
  LARGE
  EXTRA_LARGE
}

enum PriorityLevel {
  STANDARD
  URGENT
  CRITICAL
}

model ServiceStatusHistory {
  id        String        @id @default(uuid())
  serviceId String
  service   Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  status    ServiceStatus
  timestamp DateTime      @default(now())
  notes     String?
  
  @@map("service_status_history")
}

model SharedRideGroup {
  id              String        @id @default(uuid())
  routeId         String
  route           Route         @relation(fields: [routeId], references: [id])
  maxCapacity     Int
  currentCapacity Int           @default(0)
  status          ServiceStatus @default(SEARCHING_DRIVER)
  createdAt       DateTime      @default(now())
  discountRate    Float         @default(0.5) // 50% discount
  pickupRadius    Int           @default(200) // meters
  
  services        Service[]
  
  @@map("shared_ride_groups")
}

model DriverAvailability {
  id              String        @id @default(uuid())
  driverProfileId String
  driver          DriverProfile @relation(fields: [driverProfileId], references: [id], onDelete: Cascade)
  date            DateTime
  isAvailable     Boolean       @default(true)
  availableFrom   DateTime?
  availableTo     DateTime?
  
  @@unique([driverProfileId, date])
  @@map("driver_availability")
}

model DriverDistrict {
  id              String        @id @default(uuid())
  driverProfileId String
  driver          DriverProfile @relation(fields: [driverProfileId], references: [id], onDelete: Cascade)
  districtId      String
  district        District      @relation(fields: [districtId], references: [id])
  customPrice     Float?        // Override default day booking price for this district
  
  @@unique([driverProfileId, districtId])
  @@map("driver_districts")
}

// ===== STORE MODELS (Enhanced) =====

model Store {
  id              String      @id @default(uuid())
  name            String
  type            StoreType
  locationId      String
  location        Location    @relation(fields: [locationId], references: [id])
  ownerId         String
  owner           StoreOwnerProfile @relation(fields: [ownerId], references: [id])
  contactPhone    String
  contactEmail    String?
  operatingHours  String      // JSON string with operating hours
  description     String?
  rating          Float       @default(0)
  isActive        Boolean     @default(true)
  isTemporarilyClosed Boolean @default(false)
  closureReason   String?
  
  products        Product[]
  orders          Service[]
  staff           StoreStaff[]
  businessHours   BusinessHours[]
  
  @@map("stores")
}

enum StoreType {
  GROCERY
  PHARMACY
  RESTAURANT
  RETAIL
  ELECTRONICS
  OTHER
}

model StoreStaff {
  id       String    @id @default(uuid())
  storeId  String
  store    Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  name     String
  role     StaffRole
  phone    String
  email    String?
  isActive Boolean   @default(true)
  
  @@map("store_staff")
}

enum StaffRole {
  MANAGER
  CASHIER
  INVENTORY
  DELIVERY
}

model BusinessHours {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  dayOfWeek Int       // 0 = Sunday, 1 = Monday, etc.
  openTime  String    // HH:MM format
  closeTime String    // HH:MM format
  isClosed  Boolean   @default(false)
  
  @@unique([storeId, dayOfWeek])
  @@map("business_hours")
}

model Product {
  id          String      @id @default(uuid())
  storeId     String
  store       Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  name        String
  description String?
  price       Float
  category    String
  image       String?
  inStock     Boolean     @default(true)
  stockQuantity Int       @default(0)
  minStockLevel Int       @default(0)
  sku         String?     @unique
  
  orderItems  OrderItem[]
  
  @@map("products")
}

model OrderItem {
  id          String    @id @default(uuid())
  serviceId   String
  service     Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Float
  specialRequest String?
  
  @@map("order_items")
}

// ===== HOUSE MOVING MODELS (Enhanced) =====

model MoveInventoryItem {
  id          String    @id @default(uuid())
  serviceId   String
  service     Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  name        String
  category    String
  quantity    Int
  specialHandling Boolean  @default(false)
  specialInstructions String?
  photoUrl    String?
  insuranceValue Float?
  
  @@map("move_inventory_items")
}

model MovingCompany {
  id              String     @id @default(uuid())
  name            String
  contactPhone    String
  contactEmail    String
  website         String?
  rating          Float      @default(0)
  pricePerHour    Float
  isActive        Boolean    @default(true)
  
  services        Service[]
  currentLocationId String?
  currentLocation   Location? @relation(fields: [currentLocationId], references: [id])
  
  @@map("moving_companies")
}

// ===== PAYMENT SYSTEM (Enhanced) =====

model Payment {
  id              String          @id @default(uuid())
  serviceId       String          @unique
  service         Service         @relation(fields: [serviceId], references: [id])
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  amount          Float
  platformFee     Float           // Commission taken by platform
  driverEarnings  Float?          // Amount driver receives
  storeEarnings   Float?          // Amount store receives
  paymentMethod   PaymentMethod
  status          PaymentStatus   @default(PENDING)
  transactionId   String?         @unique
  paymentDate     DateTime?
  refundAmount    Float?
  refundReason    String?
  refundDate      DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@map("payments")
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  MOBILE_MONEY
  BANK_TRANSFER
  CASH
  WALLET
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
  DISPUTED
}

// ===== FEEDBACK SYSTEM (Enhanced) =====

model Review {
  id              String    @id @default(uuid())
  serviceId       String    @unique
  service         Service   @relation(fields: [serviceId], references: [id])
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  rating          Int       // 1-5 overall rating
  driverRating    Int?      // 1-5 specifically for driver
  vehicleRating   Int?      // 1-5 for vehicle condition
  serviceRating   Int?      // 1-5 for overall service
  safetyRating    Int?      // 1-5 for safety
  comment         String?
  isModerated     Boolean   @default(false)
  moderatedBy     String?   // Admin user ID
  moderatedAt     DateTime?
  createdAt       DateTime  @default(now())
  
  @@map("reviews")
}

model DriverToUserReview {
  id              String    @id @default(uuid())
  serviceId       String    @unique
  service         Service   @relation(fields: [serviceId], references: [id])
  driverId        String
  driver          DriverProfile @relation(fields: [driverId], references: [id])
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  rating          Int       // 1-5
  comment         String?
  createdAt       DateTime  @default(now())
  
  @@map("driver_to_user_reviews")
}

// ===== REPORTING SYSTEM (Enhanced) =====

model Report {
  id              String       @id @default(uuid())
  userId          String
  user            User         @relation(fields: [userId], references: [id])
  serviceId       String
  service         Service      @relation(fields: [serviceId], references: [id])
  reportType      ReportType
  description     String
  incidentDate    DateTime
  status          ReportStatus @default(SUBMITTED)
  responseMessage String?
  assignedTo      String?      // Admin user ID
  priority        PriorityLevel @default(STANDARD)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  // The driver being reported (if applicable)
  reportedDriverId String?
  reportedDriver   DriverProfile? @relation(fields: [reportedDriverId], references: [id])
  
  // Attachments
  attachments     Attachment[]
  
  @@map("reports")
}

enum ReportType {
  SAFETY_CONCERN
  INAPPROPRIATE_BEHAVIOR
  DRIVER_MISCONDUCT
  PAYMENT_ISSUE
  DELIVERY_ISSUE
  SERVICE_QUALITY
  VEHICLE_CONDITION
  FRAUD
  HARASSMENT
  OTHER
}

enum ReportStatus {
  SUBMITTED
  UNDER_REVIEW
  RESOLVED
  DISMISSED
  ESCALATED
  REQUIRES_ACTION
}

model Attachment {
  id          String    @id @default(uuid())
  reportId    String
  report      Report    @relation(fields: [reportId], references: [id], onDelete: Cascade)
  fileUrl     String
  fileType    String    // image/jpeg, image/png, application/pdf, etc.
  uploadedAt  DateTime  @default(now())
  
  @@map("attachments")
}

// ===== NOTIFICATION SYSTEM (Enhanced) =====

model Notification {
  id          String            @id @default(uuid())
  userId      String
  user        User              @relation(fields: [userId], references: [id])
  title       String
  body        String
  type        NotificationType
  data        String?           // JSON data
  isRead      Boolean           @default(false)
  priority    PriorityLevel     @default(STANDARD)
  expiresAt   DateTime?
  createdAt   DateTime          @default(now())
  
  @@map("notifications")
}

enum NotificationType {
  SERVICE_UPDATE
  PAYMENT
  PROMOTION
  SYSTEM
  EMERGENCY
  DRIVER_ASSIGNED
  DELIVERY_UPDATE
  PLACE_RECOMMENDATION
  SAFETY_ALERT
  MAINTENANCE
}

// ===== RECOMMENDED PLACE SYSTEM (Enhanced) =====

model Survey {
  id              String        @id @default(uuid())
  userId          String?       // Optional - for logged-in app users
  user            User?         @relation(fields: [userId], references: [id])
  anonymousUserId String?       // For web users who don't log in
  anonymousUser   AnonymousUser? @relation(fields: [anonymousUserId], references: [id])
  startedAt       DateTime      @default(now())
  completedAt     DateTime?
  status          SurveyStatus  @default(IN_PROGRESS)
  lastCategoryId  String?       // Last category viewed in the survey
  
  // Relations
  placeVotes      PlaceVote[]   // All votes cast in this survey
  
  @@map("place_surveys")
}

enum SurveyStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

model PlaceCategory {
  id              String        @id @default(uuid())
  name            String        @unique
  description     String?
  icon            String?       // Icon reference for the category
  sortOrder       Int           @default(0)
  isActive        Boolean       @default(true)
  
  // Relations
  places          Place[]       // Places that belong to this category
  userPreferences UserPreferenceInsight[]
  
  @@map("place_categories")
}

model Place {
  id              String        @id @default(uuid())
  name            String
  description     String?
  imageUrl        String?       // Featured image of the place
  locationId      String?
  location        Location?     @relation(fields: [locationId], references: [id])
  categoryId      String
  category        PlaceCategory @relation(fields: [categoryId], references: [id])
  ownerId         String?
  owner           PlaceOwnerProfile? @relation(fields: [ownerId], references: [id])
  rating          Float?        // Average rating if available
  priceLevel      PriceLevel?   // Price indicator
  contactInfo     String?
  websiteUrl      String?
  openingHours    String?       // JSON string with opening hours
  tags            String?       // Comma-separated tags
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  isActive        Boolean       @default(true)
  isApproved      Boolean       @default(false)
  approvedBy      String?       // Admin user ID
  approvedAt      DateTime?
  
  // AI training and recommendation metrics
  recommendationScore Float     @default(0)  // Computed score for recommendations
  viewCount       Int           @default(0)  // How many times shown in surveys
  
  // Enhanced features
  capacity        Int?          // Maximum capacity for events/restaurants
  isSeasonallyAvailable Boolean @default(true)
  seasonalStart   DateTime?
  seasonalEnd     DateTime?
  
  // Relations
  placeVotes      PlaceVote[]   // Votes for this place
  placeAttributes PlaceAttribute[] // Detailed attributes of this place
  placePhotos     PlacePhoto[]  // Photo gallery
  placeEvents     PlaceEvent[]  // Events at this place
  service         Service[]
  
  @@map("places")
}

enum PriceLevel {
  BUDGET
  MODERATE
  EXPENSIVE
  LUXURY
}

model PlacePhoto {
  id          String    @id @default(uuid())
  placeId     String
  place       Place     @relation(fields: [placeId], references: [id], onDelete: Cascade)
  photoUrl    String
  caption     String?
  isApproved  Boolean   @default(false)
  uploadedBy  String?   // User ID who uploaded
  uploadedAt  DateTime  @default(now())
  
  @@map("place_photos")
}

model PlaceEvent {
  id          String    @id @default(uuid())
  placeId     String
  place       Place     @relation(fields: [placeId], references: [id], onDelete: Cascade)
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean   @default(true)
  
  @@map("place_events")
}

model PlaceVote {
  id              String        @id @default(uuid())
  surveyId        String
  survey          Survey        @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  placeId         String
  place           Place         @relation(fields: [placeId], references: [id])
  isLiked         Boolean       // True = Yes/Like, False = No/Dislike
  userId          String?       // Optional - for logged-in app users
  user            User?         @relation(fields: [userId], references: [id])
  anonymousUserId String?       // For web users
  anonymousUser   AnonymousUser? @relation(fields: [anonymousUserId], references: [id])
  createdAt       DateTime      @default(now())
  
  @@unique([surveyId, placeId, userId])
  @@unique([surveyId, placeId, anonymousUserId])
  @@map("place_votes")
}

model PlaceAttribute {
  id              String        @id @default(uuid())
  placeId         String
  place           Place         @relation(fields: [placeId], references: [id], onDelete: Cascade)
  key             String        // Attribute name (e.g., "cuisine", "amenities")
  value           String        // Attribute value (e.g., "Italian", "Free WiFi")
  
  @@unique([placeId, key, value])
  @@map("place_attributes")
}

model UserPreferenceInsight {
  id              String        @id @default(uuid())
  userId          String?       // Optional - for logged-in app users
  user            User?         @relation(fields: [userId], references: [id])
  anonymousUserId String?       // For web users
  anonymousUser   AnonymousUser? @relation(fields: [anonymousUserId], references: [id])
  categoryId      String
  category        PlaceCategory @relation(fields: [categoryId], references: [id])
  preferenceData  String        // JSON string with derived preferences
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@unique([userId, categoryId])
  @@unique([anonymousUserId, categoryId])
  @@map("user_preference_insights")
}

model RecommendationModel {
  id              String        @id @default(uuid())
  name            String        @unique
  version         String
  description     String?
  parameters      String        // JSON string with model parameters
  lastTrainedAt   DateTime?
  accuracy        Float?        // Measured accuracy of the model
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@map("recommendation_models")
}

// ===== SYSTEM CONFIGURATION (Enhanced) =====

model SystemConfig {
  id          String    @id @default(uuid())
  key         String    @unique
  value       String
  description String?
  category    String?   // Group related configs
  isPublic    Boolean   @default(false) // Whether config can be read by non-admins
  updatedBy   String?   // Admin user ID
  updatedAt   DateTime  @updatedAt
  
  @@map("system_configs")
}

// ===== FINANCIAL MANAGEMENT =====

model Commission {
  id              String        @id @default(uuid())
  serviceId       String        @unique
  service         Service       @relation(fields: [serviceId], references: [id])
  platformFee     Float         // Amount taken by platform
  driverEarnings  Float?        // Amount driver receives
  storeEarnings   Float?        // Amount store receives
  placeOwnerFee   Float?        // Premium listing fee for place owners
  calculatedAt    DateTime      @default(now())
  
  @@map("commissions")
}

model Invoice {
  id              String        @id @default(uuid())
  businessId      String        // Store or Place owner ID
  businessType    BusinessType
  amount          Float
  description     String
  status          InvoiceStatus @default(PENDING)
  dueDate         DateTime
  paidDate        DateTime?
  createdAt       DateTime      @default(now())
  
  @@map("invoices")
}

enum BusinessType {
  STORE
  PLACE
  MOVING_COMPANY
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

// ===== AUDIT TRAIL =====

model AuditLog {
  id          String    @id @default(uuid())
  userId      String?   // User who performed the action
  user        User?     @relation(fields: [userId], references: [id]) // Add this relation
  action      String    // Action performed
  resource    String    // Resource affected (table name)
  resourceId  String?   // ID of the affected resource
  oldValues   String?   // JSON of old values
  newValues   String?   // JSON of new values
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime  @default(now())
  
  @@map("audit_logs")
}
